//
//  SearchViewController.swift
//  Reciplease
//
//  Created by Thibault Bargat on 21/03/2019.
//  Copyright (c) 2019 Thibault Bargat. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

protocol SearchDisplayLogic: class
{
    func displayIngredients(viewModel: Search.Fetch.ViewModel)
}

class SearchViewController: UIViewController, SearchDisplayLogic
{
    // MARK: VC properties
    // TODO: Put the ingredientsList in the interactor
    @IBOutlet weak var ingredientTextField: UITextField!
    @IBOutlet weak var ingredientsListLabel: UILabel! {
        didSet{
            clearIngredientsListTextandArray()
        }
    }
    
    
    // MARK: VC Actions
    
    @IBAction func addIngredientButton(_ sender: Any) {
        let ingredient: String = ingredientTextField.text ?? ""
        if !(ingredient == "") {
            interactor?.ingredients.append(ingredient.lowercased())
            interactor?.fetchIngredients()
        }
    }
    
    @IBAction func clearIngredientsList(_ sender: Any) {
       clearIngredientsListTextandArray()
    }
    
    @IBAction func searchForRecipes(_ sender: Any) {
        self.fetchRecipesToDisplay()
    }
    
    @IBAction func dismissKeyboard(_ sender: UITapGestureRecognizer) {
        ingredientTextField.resignFirstResponder()
    }
    
    // MARK: Useful functions for labels' text management
    
    
    private func clearIngredientsListTextandArray() {
        ingredientsListLabel.text = Constants.emptyTextIngredientsList
        interactor?.ingredients = [String]()
    }
    
    // MARK: Clean Swift Elements
    var interactor: SearchBusinessLogic?
    var router: (NSObjectProtocol & SearchRoutingLogic & SearchDataPassing)?
    
    // MARK: Object lifecycle
    
    override init(nibName nibNameOrNil: String?, bundle nibBundleOrNil: Bundle?)
    {
        super.init(nibName: nibNameOrNil, bundle: nibBundleOrNil)
        setup()
    }
    
    required init?(coder aDecoder: NSCoder)
    {
        super.init(coder: aDecoder)
        setup()
    }
    
    // MARK: Setup
    
    private func setup()
    {
        let viewController = self
        let interactor = SearchInteractor()
        let presenter = SearchPresenter()
        let router = SearchRouter()
        viewController.interactor = interactor
        viewController.router = router
        interactor.presenter = presenter
        presenter.viewController = viewController
        router.viewController = viewController
        router.dataStore = interactor
    }
    
    // MARK: Routing
    /*
    override func prepare(for segue: UIStoryboardSegue, sender: Any?)
    {
        if let scene = segue.identifier {
            let selector = NSSelectorFromString("routeTo\(scene)WithSegue:")
            if let router = router, router.responds(to: selector) {
                router.perform(selector, with: segue)
            }
        }
    }
 */
    
    // MARK: View lifecycle
    
    override func viewDidLoad()
    {
        super.viewDidLoad()
    }
    
    // MARK: Do something
    
    //@IBOutlet weak var nameTextField: UITextField!
    
    func fetchRecipesToDisplay()
    {
        let request = Search.Fetch.Request()
        interactor?.fetchRecipes(request: request)
    }
    
    func displayIngredients(viewModel: Search.Fetch.ViewModel)
    {
            ingredientsListLabel.text = viewModel.displayedIngredients
    }

}
